{"ast":null,"code":"import { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport { Validators, FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nclass LoginWithDynamicFormComponent {\n  constructor() {\n    this.buttonLabel = \"Submit\";\n    this.formSubmit = new EventEmitter();\n    this.errorMessages = {\n      required: \"is a required field.\",\n      invalid: \"Please provide valid\"\n    };\n  }\n  ngOnInit() {\n    this.loginForm = this.buildFormGroup();\n  }\n  buildFormGroup() {\n    const group = {};\n    let validatorList = [];\n    this.fieldList.forEach(field => {\n      if (field.validators.required) {\n        validatorList.push(Validators.required);\n      }\n      if (field.validators.email) {\n        validatorList.push(Validators.email);\n      }\n      if (field.validators.pattern) {\n        validatorList.push(Validators.pattern(field.validators.pattern));\n      }\n      group[field.name] = new FormControl(field.value || \"\", validatorList);\n      validatorList = [];\n    });\n    return new FormGroup(group);\n  }\n  isValid(fieldName) {\n    return this.loginForm.controls[fieldName].valid;\n  }\n  isTouched(fieldName) {\n    return this.loginForm.controls[fieldName].touched;\n  }\n  onSubmit() {\n    const updatedFormData = {};\n    this.fieldList.forEach(field => {\n      updatedFormData[field.name] = this.loginForm.controls[field.name].value;\n    });\n    this.formSubmit.emit(updatedFormData);\n  }\n}\nclass LoginWithDynamicFormModule {}\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LoginWithDynamicFormComponent, LoginWithDynamicFormModule };\n//# sourceMappingURL=login-with-dynamic-form.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}